stages:
  - tagChecking
  - build
  - test
  - verification
  - sonarqube
  - deploy

workflow:
  rules:
    - if: '$CI_COMMIT_TAG'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_COMMIT_BRANCH'

tag-checker:
  stage: tagChecking
  script:
    - python3 tag_checker.py $CI_COMMIT_TAG
  only:
    - tags

unit:
  stage: test
  script:
    - ./gradlew test
  artifacts:
    paths:
      - build/jacoco/test.exec

integration:
  stage: test
  script:
    - ./gradlew integration
  artifacts:
    paths:
      - build/jacoco/integration.exec

cucumber:
  stage: test
  script:
    - ./gradlew cucumber
  artifacts:
    paths:
      - build/jacoco/cucumber.exec

generate-reports:
  stage: verification
  dependencies:
    - cucumber
    - integration
    - unit
  script:
    ./gradlew jacocoTestReport
  artifacts:
    paths:
      - build/jacoco/*

sonarqube-report:
  stage: sonarqube
  script: ./gradlew sonarqube

# builds all branches, except dev and main
branch-build:
  stage: build
  script:
    - export AZURE_ENDPOINT=${AZURE_ENDPOINT}
    - export AZURE_KEY=${AZURE_KEY}
    - ./gradlew bootJar
  except:
    - tags
    - main
    - dev

deploy-staging:
  stage: deploy
  script:
    - ./gradlew bootJar
    - rm -rf /home/gitlab-runner/staging/ || true
    - mkdir /home/gitlab-runner/staging/
    - cp -r ./build/libs /home/gitlab-runner/staging
    - cp runner-scripts/staging.sh /home/gitlab-runner/staging.sh
    - chmod u+x /home/gitlab-runner/staging.sh
    - echo "export DB_USERNAME=${DB_USERNAME}" > /home/gitlab-runner/staging/.env
    - echo "export DB_PASSWORD=${DB_PASSWORD}" >> /home/gitlab-runner/staging/.env
    - echo "export WEATHER_KEY=${WEATHER_KEY}" >> /home/gitlab-runner/staging/.env
    - echo "export MAIL_USERNAME=${MAIL_USERNAME}" >> /home/gitlab-runner/staging/.env
    - echo "export MAIL_PASSWORD=${MAIL_PASSWORD}" >> /home/gitlab-runner/staging/.env
    - echo "export SONARQUBE_KEY=${SONARQUBE_KEY}" >> /home/gitlab-runner/staging/.env
    - echo "export DB_URL=${DB_URL_TEST}" >> /home/gitlab-runner/staging/.env
    - echo "export LOCATION_KEY=${LOCATION_KEY}" >> /home/gitlab-runner/staging/.env
    - echo "export AZURE_KEY=${AZURE_KEY}" >> /home/gitlab-runner/staging/.env
    - echo "export AZURE_ENDPOINT=${AZURE_ENDPOINT}" >> /home/gitlab-runner/staging/.env
    - sudo systemctl restart staging
  only:
    - dev

deploy-production:
  stage: deploy
  script:
    - ./gradlew bootJar
    - rm -rf /home/gitlab-runner/production/ || true
    - mkdir /home/gitlab-runner/production/
    - cp -r ./build/libs /home/gitlab-runner/production
    - cp runner-scripts/production.sh /home/gitlab-runner/production.sh
    - chmod u+x /home/gitlab-runner/production.sh
    - echo "export DB_USERNAME=${DB_USERNAME}" > /home/gitlab-runner/production/.env
    - echo "export DB_PASSWORD=${DB_PASSWORD}" >> /home/gitlab-runner/production/.env
    - echo "export WEATHER_KEY=${WEATHER_KEY}" >> /home/gitlab-runner/production/.env
    - echo "export MAIL_USERNAME='${MAIL_USERNAME}'" >> /home/gitlab-runner/production/.env
    - echo "export MAIL_PASSWORD='${MAIL_PASSWORD}'" >> /home/gitlab-runner/production/.env
    - echo "export SONARQUBE_KEY=${SONARQUBE_KEY}" >> /home/gitlab-runner/production/.env
    - echo "export DB_URL=${DB_URL_PROD}" >> /home/gitlab-runner/production/.env
    - echo "export LOCATION_KEY=${LOCATION_KEY}" >> /home/gitlab-runner/production/.env
    - echo "export AZURE_KEY=${AZURE_KEY}" >> /home/gitlab-runner/production/.env
    - echo "export AZURE_ENDPOINT=${AZURE_ENDPOINT}" >> /home/gitlab-runner/production/.env
    - sudo systemctl restart production
  artifacts:
    paths:
      - build/libs
  only:
    - tags
