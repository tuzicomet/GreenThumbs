import org.gradle.api.tasks.testing.logging.TestExceptionFormat

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.2'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'jacoco'
	id 'org.sonarqube' version '4.0.0.2929'
}

group = 'nz.ac.canterbury.seng302.team-200'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'com.h2database:h2'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-mail'

	implementation "org.mariadb.jdbc:mariadb-java-client:3.3.3"
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

	// Used for generating PDFs
	implementation 'org.xhtmlrenderer:flying-saucer-pdf:9.9.4'

	// cumber
	testImplementation 'io.cucumber:cucumber-java:7.15.0'
	testImplementation 'io.cucumber:cucumber-spring:7.15.0'
	testImplementation 'io.cucumber:cucumber-junit-platform-engine:7.15.0'
	testImplementation 'org.junit.platform:junit-platform-suite:1.10.2'
}

jacoco {
	toolVersion = "0.8.9"
}

tasks.named("check") {
	dependsOn test, integration, cucumber
}

tasks.named('test') {
	// Use JUnit Platform for unit tests.
	useJUnitPlatform()
	filter {
		includeTestsMatching "nz.ac.canterbury.seng302.gardenersgrove.unit.*"
	}
	testLogging {
		events "passed", "skipped", "failed", "standardOut", "standardError"
	}

	// The unitTestReport will be run after the unit test task has completed
	finalizedBy "unitTestReport"

}

tasks.register("integration", Test) {
	group 'verification'
	useJUnitPlatform()
	filter{
		includeTestsMatching "nz.ac.canterbury.seng302.gardenersgrove.integration.*"
	}
	testLogging {
		events "passed", "skipped", "failed", "standardOut", "standardError"
	}

	// The integrationTestReport will be run after the integration test task has completed
	finalizedBy "integrationTestReport"
}

tasks.register("cucumber", Test) {
	group 'verification'
	testLogging.showStandardStreams = true
	systemProperty "spring.config.additional-location", "classpath:/application.properties"
	useJUnitPlatform()
	filter {
		// Ensure this lines up with the package your cucumber tests are located in
		includeTestsMatching "nz.ac.canterbury.seng302.gardenersgrove.cucumber.*"
	}
	testLogging {
		events "passed", "skipped", "failed", "standardOut", "standardError"
		exceptionFormat TestExceptionFormat.FULL
	}

	// The cucumberTestReport will be run after the cucumber test task has completed
	finalizedBy "cucumberTestReport"
}

jacocoTestReport { // Generate a report for all generated test data
	onlyIf { // Allow the report to be skipped when -PskipTestReport is passed via commandline
		return !project.hasProperty('skipTestReport')
	}

	mustRunAfter test, integration, cucumber

	executionData fileTree(project.rootDir) {
		include '**/*.exec'
	}
	reports {
		xml.required = true
		xml.destination file("${buildDir}/jacoco/test-report.xml")
		csv.required = false
		html.destination file("${buildDir}/reports/coverage/overall")
	}
}

tasks.register("unitTestReport", JacocoReport) { // Generate a report for unit tests
	group = 'verification'

	onlyIf { // Allow the report to be skipped when -PskipTestReport is passed via commandline
		return !project.hasProperty('skipTestReport')
	}

	dependsOn test

	executionData project.tasks.test

	sourceDirectories = project.files(project.sourceSets.main.allSource.srcDirs)
	classDirectories = project.sourceSets.main.output

	reports {
		// The jacoco coverage report will ge generated in the destination below
		html.destination file("${buildDir}/reports/coverage/test")
		xml.required = true
		xml.destination file("${buildDir}/reports/coverage/test.xml")
	}
}

tasks.register("integrationTestReport", JacocoReport) { // Generate a report for integration tests
	group = 'verification'

	onlyIf { // Allow the report to be skipped when -PskipTestReport is passed via commandline
		return !project.hasProperty('skipTestReport')
	}

	dependsOn integration

	executionData project.tasks.integration

	sourceDirectories = project.files(project.sourceSets.main.allSource.srcDirs)
	classDirectories = project.sourceSets.main.output

	reports {
		// The jacoco coverage report will ge generated in the destination below
		html.destination file("${buildDir}/reports/coverage/integration")
		xml.required = true
		xml.destination file("${buildDir}/reports/coverage/integration.xml")
	}
}

tasks.register("cucumberTestReport", JacocoReport) { // Generate a report for cucumber tests
	group = 'verification'

	onlyIf { // Allow the report to be skipped when -PskipTestReport is passed via commandline
		return !project.hasProperty('skipTestReport')
	}

	dependsOn cucumber

	executionData project.tasks.cucumber

	sourceDirectories = project.files(project.sourceSets.main.allSource.srcDirs)
	classDirectories = project.sourceSets.main.output

	reports {
		// The jacoco coverage report will ge generated in the destination below
		html.destination file("${buildDir}/reports/coverage/cucumber")
		xml.required = true
		xml.destination file("${buildDir}/reports/coverage/cucumber.xml")
	}
}

tasks.named("unitTestReport").configure { finalizedBy 'jacocoTestReport' }
tasks.named("integrationTestReport").configure { finalizedBy 'jacocoTestReport' }
tasks.named("cucumberTestReport").configure { finalizedBy 'jacocoTestReport' }

sonarqube {
	properties {
		property "sonar.projectKey", "seng302-2024-team200"
		property "sonar.projectName", "seng302-2024-team200"
		property "sonar.sourceEncoding", "UTF-8"
		property "sonar.host.url", "https://sonarqube.csse.canterbury.ac.nz"
		property "sonar.login", "$System.env.SONARQUBE_KEY"

		// For pipelines run for a branch build only
		if (System.env.CI_MERGE_REQUEST_IID == null || System.env.CI_MERGE_REQUEST_IID.trim().isEmpty()) {
			property "sonar.branch.name", "$System.env.CI_COMMIT_REF_NAME"
		}
		else {
			property "sonar.pullrequest.key", "$System.env.CI_MERGE_REQUEST_IID"
			property "sonar.pullrequest.branch", "$System.env.CI_MERGE_REQUEST_SOURCE_BRANCH_NAME"
			property "sonar.pullrequest.base", "$System.env.CI_MERGE_REQUEST_TARGET_BRANCH_NAME"
		}
	}
}
