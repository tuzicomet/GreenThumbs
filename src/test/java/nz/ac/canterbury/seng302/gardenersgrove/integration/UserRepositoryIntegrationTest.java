package nz.ac.canterbury.seng302.gardenersgrove.integration;

import nz.ac.canterbury.seng302.gardenersgrove.entity.AbstractUser;
import nz.ac.canterbury.seng302.gardenersgrove.entity.User;
import nz.ac.canterbury.seng302.gardenersgrove.repository.UserRepository;
import nz.ac.canterbury.seng302.gardenersgrove.service.UserService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.transaction.annotation.Transactional;

import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

@SpringBootTest
@Transactional // any changes made to the database during the test will be rolled back afterward
class UserRepositoryIntegrationTest {

    // Most test methods currently here were partially generated by AI :(

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private UserService userService;

    @BeforeEach
    void setUp() {
        // Initialize test data
        User user1 = new User("Bob", "Omb",
                "Bobtest@gmail.com", "Testp4$$",
                "2000-10-10", "default");
        User user2 = new User("Coney", null,
                "coney@gmail.com", "C0neyd0g$",
                null, null);
        userRepository.save(user1);
        userRepository.save(user2);
    }

    @Test
    void findByEmail_EmailExists_ReturnsUser() {
        String email = "Bobtest@gmail.com";

        AbstractUser foundUser = userRepository.findByEmail(email);

        assertThat(foundUser.getEmail()).isEqualTo(email);
    }

    @Test
    void findByEmail_EmailDoesntExist_ReturnsNull() {
        String email = "nonexistent@example.com";

        AbstractUser foundUser = userRepository.findByEmail(email);

        assertThat(foundUser).isNull();
    }

    @Test
    void findByEmailAndPassword_EmailAndPasswordExists_ReturnsUser() {
        String email = "coney@gmail.com";
        String password = "C0neyd0g$";

        User foundUser = (User) userRepository.findByEmailAndPassword(email, password);

        assertThat(foundUser.getEmail()).isEqualTo(email);
        assertThat(foundUser.getPassword()).isEqualTo(password);
    }

    @Test
    void findByEmailAndPassword_EmailAndPasswordDoesntExist_ReturnsNull() {
        String email = "nonexistent@example.com";
        String password = "password";

        User foundUser = (User) userRepository.findByEmailAndPassword(email, password);

        assertThat(foundUser).isNull();
    }

    @Test
    void saveUser_ValidValues_UserIsSavedCorrectly() {
        User newUser = new User("Billy", "Jones", "billyjones@gmail.com",
                "passyword", "2003-01-01", "xIywOXhjakO");

        User savedUser = userRepository.save(newUser);

        assertThat(savedUser.getUserId()).isNotNull();
        assertThat(userRepository.findByEmail("billyjones@gmail.com")).isEqualTo(savedUser);

        // check that the returned user has the correct values
        assertThat(savedUser.getUserId()).isNotNull();
        assertThat(savedUser.getFirstName()).isEqualTo("Billy");
        assertThat(savedUser.getLastName()).isEqualTo("Jones");
        assertThat(savedUser.getEmail()).isEqualTo("billyjones@gmail.com");
        assertThat(savedUser.getPassword()).isEqualTo("passyword");
        assertThat(savedUser.getDateOfBirth()).isEqualTo("2003-01-01");
        assertThat(savedUser.getProfilePicture()).isEqualTo("xIywOXhjakO");
    }

    @Test
    void saveUser_ValidValues_UserInformationIsSaved() {
        User newUser = new User("Billy", "Jones", "billyjones@gmail.com",
                "passyword", "2003-01-01", "xIywOXhjakO");

        User savedUser = userRepository.save(newUser);

        assertThat(savedUser.getUserId()).isNotNull();
        assertThat(userRepository.findByEmail("billyjones@gmail.com")).isEqualTo(savedUser);
    }

    @Test
    void updateUserDetails_ValidDetailsEntered_UserUpdated() {
        User testUser = new User("test", "user",
                "testEmail@gmail.com", "Testp4$$",
                "2000-10-10", "default");

        userRepository.save(testUser);
        Long userId = testUser.getUserId();
        String newFirstName = "NewBob";
        String newLastName = "NewOmb";
        String newEmail = "newBob@gmail.com";
        String newDob = "1999-06-06";
        testUser.setFirstName(newFirstName);
        testUser.setLastName(newLastName);
        testUser.setEmail(newEmail);
        testUser.setDateOfBirth(newDob);

        // When
        Optional<AbstractUser> updatedUserLookup = userRepository.findByUserId(userId);
        assertTrue(updatedUserLookup.isPresent());
        AbstractUser updatedUser = updatedUserLookup.get();
        assertEquals(newFirstName, updatedUser.getFirstName());
        assertEquals(newLastName, updatedUser.getLastName());
        assertEquals(newEmail, updatedUser.getEmail());
        assertEquals(newDob, updatedUser.getDateOfBirth()); // Assuming you have proper handling for comparing dates
    }

}